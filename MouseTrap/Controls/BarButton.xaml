<local:BarButtonBase x:Class="MouseTrap.Controls.BarButton"
		x:Name="Root"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
		xmlns:local="clr-namespace:MouseTrap.Controls"
		xmlns:emoji="clr-namespace:Emoji.Wpf;assembly=Emoji.Wpf"	
		mc:Ignorable="d" 
		ButtonText="Hello There"
		IsHighlighted="False"
		d:DesignHeight="50" d:DesignWidth="100">
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="/MouseTrap;component/Colours.xaml" />
			</ResourceDictionary.MergedDictionaries>

			<Style x:Key="ButtonBorder" TargetType="{x:Type Border}">
				<!-- Default style -->
				<Setter Property="Padding" Value="{Binding ButtonPadding}" />
				<Setter Property="BorderThickness" Value="0,0,0,2" />
				<Setter Property="BorderBrush" Value="{StaticResource MenuButton.Default.BorderBrush}" />
				<Setter Property="Background" Value="{StaticResource MenuButton.Default.Background}"/>

				<Style.Triggers>
					<!-- Disabled button -->
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="BorderBrush" Value="{StaticResource MenuButton.Disabled.BorderBrush}" />
						<Setter Property="Background" Value="{StaticResource MenuButton.Disabled.Background}"/>
					</Trigger>

					<!-- Regular button hover -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="true" />
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=Button}}" Value="true" />
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderBrush" Value="{StaticResource MenuButton.Default.Hover.BorderBrush}" />
						<Setter Property="Background" Value="{StaticResource MenuButton.Default.Hover.Background}"/>
					</MultiDataTrigger>

					<!-- Active button and hover -->
					<DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource AncestorType=Button}}" Value="Active">
						<Setter Property="BorderBrush" Value="{StaticResource MenuButton.Highlighted.BorderBrush}" />
						<Setter Property="Background" Value="{StaticResource MenuButton.Highlighted.Background}"/>
					</DataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding Tag, RelativeSource={RelativeSource AncestorType=Button}}" Value="Active" />
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="true" />
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource AncestorType=Button}}" Value="true" />
						</MultiDataTrigger.Conditions>
						<Setter Property="BorderBrush" Value="{StaticResource MenuButton.Highlighted.Hover.BorderBrush}" />
						<Setter Property="Background" Value="{StaticResource MenuButton.Highlighted.Hover.Background}"/>
					</MultiDataTrigger>
				</Style.Triggers>

				<!-- Inner content style -->
				<Style.Resources>
					<Style TargetType="{x:Type TextBlock}">
						<Style.Triggers>
							<MultiDataTrigger>
								<MultiDataTrigger.Conditions>
									<Condition Binding="{Binding Tag, RelativeSource={RelativeSource AncestorType=Button}}" Value="{x:Null}" />
									<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource AncestorType=Button}}" Value="false" />
								</MultiDataTrigger.Conditions>
								<Setter Property="Foreground" Value="Gray" />
							</MultiDataTrigger>
						</Style.Triggers>
					</Style>
				</Style.Resources>
			</Style>
		</ResourceDictionary>
	</UserControl.Resources>

	<UserControl.Background>
		<StaticResource ResourceKey="Main.Background" />
	</UserControl.Background>

	<Button DataContext="{Binding ElementName=Root}" Command="{Binding PressCommand}">
		<Button.Style>
			<Style TargetType="Button">
				<!-- Enabled button template with colour emoji -->
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type Button}">
							<Border Style="{StaticResource ButtonBorder}">
								<emoji:TextBlock Text="{Binding ButtonText}" VerticalAlignment="Center" HorizontalAlignment="Center" />
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<!-- Button is tagged as active view -->
					<DataTrigger Binding="{Binding IsHighlighted}" Value="True">
						<Setter Property="Tag" Value="Active" />
					</DataTrigger>
					<!-- Disabled button template with b/w emoji -->
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
							<Condition Binding="{Binding IsHighlighted}" Value="False" />
						</MultiDataTrigger.Conditions>
						<Setter Property="Template">
							<Setter.Value>
								<ControlTemplate TargetType="{x:Type Button}">
									<Border Style="{StaticResource ButtonBorder}">
										<TextBlock Text="{Binding ButtonText}" VerticalAlignment="Center" HorizontalAlignment="Center" />
									</Border>
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>
		</Button.Style>
	</Button>
</local:BarButtonBase>
